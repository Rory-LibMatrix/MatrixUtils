@using LibMatrix.RoomTypes
@using LibMatrix.Responses
@using MatrixUtils.LibDMSpace
@using System.Text.Json.Serialization
@using LibMatrix.EventTypes.Spec.State.RoomInfo
@using MatrixUtils.Abstractions

<b>
    <u>DM Space setup tool - stage 3: Preview space layout</u>
</b>
<p>This gives you a preview of how your settings would impact layout!</p>

@if (!string.IsNullOrWhiteSpace(Status)) {
    <p>@Status</p>
}

@if (SetupData is not null) {
    @if (SetupData.DMSpaceRoomInfo is not null) {
        <p>
            <InputCheckbox @bind-Value="SetupData.DmSpaceInfo.LayerByUser"></InputCheckbox>
            Create sub-spaces per user
        </p>
        @if (!SetupData.DmSpaceInfo.LayerByUser) {
            <RoomListItem RoomInfo="@SetupData.DMSpaceRoomInfo"></RoomListItem>
            @foreach (var (userId, room) in SetupData.DMRooms.OrderBy(x => x.Key.DisplayName)) {
                @foreach (var roomInfo in room) {
                    <div style="margin-left: 32px;">
                        <RoomListItem RoomInfo="@roomInfo"></RoomListItem>
                    </div>
                }
            }
        }
        else {
            <RoomListItem RoomInfo="@SetupData.DMSpaceRoomInfo"></RoomListItem>
            @foreach (var (user, room) in SetupData.DMRooms.OrderBy(x => x.Key.DisplayName)) {
                <div style="margin-left: 32px;">
                    @{
                        RoomInfo fakeRoom = new(SetupData.DMSpaceRoomInfo.Room) {
                            RoomName = user.DisplayName ?? user.Id,
                            RoomIcon = user.AvatarUrl
                        };
                    }
                    <RoomListItem RoomInfo="@fakeRoom"></RoomListItem>
                </div>
                @foreach (var roomInfo in room) {
                    <div style="margin-left: 64px;">
                        <RoomListItem RoomInfo="@roomInfo"></RoomListItem>
                    </div>
                }
            }
        }
    }
    else {
        <b>Error: SetupData.DMSpaceRoomInfo is null!</b>
    }
}
else {
    <b>Error: DMSpaceRootPageConfiguration is null!</b>
}

<br/>
<LinkButton OnClick="@Execute">Next</LinkButton>

@code {

    private string? Status {
        get => _status;
        set {
            _status = value;
            StateHasChanged();
        }
    }

    private string? _status;

    [CascadingParameter]
    public DMSpace.DMSpaceSetupData SetupData { get; set; }

    SemaphoreSlim _semaphore = new(1, 1);

    protected override async Task OnInitializedAsync() {
        if (SetupData is null)
            return;
        await _semaphore.WaitAsync();
        var hs = SetupData.Homeserver;
        // var dmSpaceRoom = new DMSpaceRoom(hs, SetupData.DmSpaceConfiguration.DMSpaceId);
        // SetupData.
        // dmSpaceRoomInfo = new() {
        // RoomName = await dmSpaceRoom.GetNameAsync(),
        // CreationEventContent = await dmSpaceRoom.GetCreateEventAsync(),
        // RoomIcon = "mxc://feline.support/uUxBwaboPkMGtbZcAGZaIzpK",
        // Room = dmSpaceRoom
        // };
        // dmSpaceInfo = await dmSpaceRoom.GetDMSpaceInfo();
        // Status = "Loading DM list from account data...";
        // var dms = await SetupData.Homeserver.GetAccountDataAsync<Dictionary<string, List<string>>>("m.direct");

        Status = "DM list optimised, fetching info...";
        // var results = dms.Select(async x => {
        //     var (userId, rooms) = x;
        //     UserProfileWithId userProfile;
        //     try {
        //         var profile = await SetupData.Homeserver.GetProfileAsync(userId);
        //         userProfile = new() {
        //             AvatarUrl = profile.AvatarUrl,
        //             Id = userId,
        //             DisplayName = profile.DisplayName
        //         };
        //     }
        //     catch {
        //         userProfile = new() {
        //             AvatarUrl = "mxc://feline.support/uUxBwaboPkMGtbZcAGZaIzpK",
        //             DisplayName = userId,
        //             Id = userId
        //         };
        //     }
        //     var roomList = new List<RoomInfo>();
        //     var tasks = rooms.Select(x => GetRoomInfo(hs.GetRoom(x))).ToAsyncEnumerable();
        //     await foreach (var result in tasks)
        //         roomList.Add(result);
        //     return (userProfile, roomList);
        // }).ToAsyncEnumerable();
        // await foreach (var res in results) {
        //     dmRooms.Add(new RoomInfo() {
        //         Room = dmSpaceRoom,
        //         RoomIcon = res.userProfile.AvatarUrl,
        //         RoomName = res.userProfile.DisplayName,
        //         CreationEventContent = await dmSpaceRoom.GetCreateEventAsync()
        //     }, res.roomList);
        // }
        await SetupData.DMSpaceRoomInfo!.FetchAllStateAsync();
        _semaphore.Release();
        Status = null;
        await base.OnParametersSetAsync();
    }

    private async Task Execute() {
        var hs = SetupData.Homeserver;
        var dmSpaceRoom = new DMSpaceRoom(hs, SetupData.DmSpaceConfiguration!.DMSpaceId!);
        await dmSpaceRoom.ImportNativeDMs();
        NavigationManager.NavigateTo("/User/DMSpace/Setup?stage=3");
    }

    private async Task<RoomInfo> GetRoomInfo(GenericRoom room) {
        var roomInfo = new RoomInfo(room);
        var roomMembers = new List<UserProfileWithId>();
        roomInfo.CreationEventContent = await room.GetCreateEventAsync();
        try {
            roomInfo.RoomName = await room.GetNameAsync();
        }
        catch { }

        var membersEnum = room.GetMembersEnumerableAsync("join");
        await foreach (var member in membersEnum)
            if (member.TypedContent is RoomMemberEventContent memberEvent)
                roomMembers.Add(new() { DisplayName = memberEvent.DisplayName, AvatarUrl = memberEvent.AvatarUrl, Id = member.StateKey });

        if (string.IsNullOrWhiteSpace(roomInfo.RoomName) || roomInfo.RoomName == room.RoomId) {
            List<string> displayNames = new List<string>();
            foreach (var member in roomMembers)
                if (!string.IsNullOrWhiteSpace(member.DisplayName))
                    displayNames.Add(member.DisplayName);
            roomInfo.RoomName = string.Join(", ", displayNames);
        }

        try {
            string? roomIcon = (await room.GetAvatarUrlAsync())?.Url;
            if (room is not null)
                roomInfo.RoomIcon = roomIcon;
        }
        catch { }

        return roomInfo;
    }

    private async Task<List<RoomInfo>> GetRoomInfoForRooms(List<GenericRoom> rooms) {
        var tasks = rooms.Select(GetRoomInfo).ToList();
        await Task.WhenAll(tasks);
        return tasks.Select(x => x.Result).ToList();
    }

    private class UserProfileWithId : UserProfileResponse {
        [JsonIgnore]
        public string Id { get; set; }
    }

}