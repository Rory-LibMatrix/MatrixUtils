@page "/RoomStateViewer/{RoomId}"
@using MatrixRoomUtils.Core.Extensions
@using System.Net.Http.Headers
@using System.Text.Json
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
<h3>Room state viewer - Viewing @RoomId</h3>
<hr/>

<p>@status</p>

<input type="checkbox" id="showAll" @bind="ShowMembershipEvents"/> Show member events

<table class="table table-striped table-hover" style="width: fit-Content;">
    <thead>
    <tr>
        <th scope="col">Type</th>
        <th scope="col">Content</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var stateEvent in FilteredEvents.Where(x => x.state_key == "").OrderBy(x => x.origin_server_ts)) {
        <tr>
            <td>@stateEvent.type</td>
            <td style="max-width: fit-Content;">
                <pre>@stateEvent.content</pre>
            </td>
        </tr>
    }
    </tbody>
</table>

@foreach (var group in FilteredEvents.GroupBy(x => x.state_key).OrderBy(x => x.Key).Where(x => x.Key != "")) {
    <details>
        <summary>@group.Key</summary>
        <table class="table table-striped table-hover" style="width: fit-Content;">
            <thead>
            <tr>
                <th scope="col">Type</th>
                <th scope="col">Content</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var stateEvent in group.OrderBy(x => x.origin_server_ts)) {
                <tr>
                    <td>@stateEvent.type</td>
                    <td style="max-width: fit-Content;">
                        <pre>@stateEvent.content</pre>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </details>
}

<LogView></LogView>

@code {
    //get room list
    // - sync withroom list filter
    // Type = support.feline.msc3784
    //support.feline.policy.lists.msc.v1

    [Parameter]
    public string? RoomId { get; set; }

    public List<PreRenderedStateEvent> FilteredEvents { get; set; } = new();
    public List<PreRenderedStateEvent> Events { get; set; } = new();
    public string status = "";

    protected override async Task OnInitializedAsync() {
        await LocalStorageWrapper.LoadFromLocalStorage(LocalStorage);
        await base.OnInitializedAsync();
        if (RuntimeCache.CurrentHomeServer == null) {
            NavigationManager.NavigateTo("/Login");
            return;
        }
        RoomId = RoomId.Replace('~', '.');
        await LoadStatesAsync();
        Console.WriteLine("Policy list editor initialized!");
    }

    private DateTime _lastUpdate = DateTime.Now;

    private async Task LoadStatesAsync() {
        var StateLoaded = 0;
    //TODO: can we improve this?
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", RuntimeCache.CurrentHomeServer.AccessToken);
        var response = await client.GetAsync($"{RuntimeCache.CurrentHomeServer.FullHomeServerDomain}/_matrix/client/r0/rooms/{RoomId}/state");
    // var response = await client.GetAsync($"http://localhost:5117/matrix-hq-state.json");
    //var _events = await response.Content.ReadFromJsonAsync<Queue<StateEventStruct>>();
        var _data = await response.Content.ReadAsStreamAsync();
        var __events = JsonSerializer.DeserializeAsyncEnumerable<StateEventStruct>(_data);
        await foreach (var _ev in __events) {
            var e = new PreRenderedStateEvent {
                type = _ev.type,
                state_key = _ev.state_key,
                origin_server_ts = _ev.origin_server_ts,
                content = _ev.content.ToJson(true, true)
            };
            Events.Add(e);
            if (string.IsNullOrEmpty(e.state_key)) {
                FilteredEvents.Add(e);
            }
            StateLoaded++;
            if ((DateTime.Now - _lastUpdate).TotalMilliseconds > 100) {
                _lastUpdate = DateTime.Now;
                status = $"Loaded {StateLoaded} state events";
                StateHasChanged();
                await Task.Delay(0);
            }
        }

        StateHasChanged();
    }

    private async Task RebuildFilteredData() {
        status = "Rebuilding filtered data...";
        StateHasChanged();
        await Task.Delay(1);
        var _FilteredEvents = Events;
        if (!ShowMembershipEvents)
            _FilteredEvents = _FilteredEvents.Where(x => x.type != "m.room.member").ToList();

        status = "Done, rerendering!";
        StateHasChanged();
        await Task.Delay(1);
        FilteredEvents = _FilteredEvents;
        StateHasChanged();
    }

    public struct PreRenderedStateEvent {
        public string content { get; set; }
        public long origin_server_ts { get; set; }
        public string state_key { get; set; }
        public string type { get; set; }
    // public string Sender { get; set; }
    // public string EventId { get; set; }
    // public string UserId { get; set; }
    // public string ReplacesState { get; set; }
    }

    public bool ShowMembershipEvents {
        get => _showMembershipEvents;
        set {
            _showMembershipEvents = value;
            RebuildFilteredData();
        }
    }

    private bool _showMembershipEvents;
}