@page "/RoomStateViewer"
@using System.Net.Http.Headers
@using System.Text.Json
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
<h3>Room state viewer</h3>

<h5>Room list</h5>
<hr/>
@if (PolicyRoomList.Count == 0)
{
    <p>No policy rooms found.</p>
    <p>Loading progress: @checkedRoomCount/@totalRoomCount</p>
}
else
{
    @if (checkedRoomCount != totalRoomCount)
    {
        <p>Loading progress: @checkedRoomCount/@totalRoomCount</p>
    }
    foreach (var s in PolicyRoomList)
    {
        <a href="@(NavigationManager.Uri + "/" + s.RoomId.Replace('.', '~'))">@s.Name (@s.RoomId)</a>
        <br/>
    }
    <div style="margin-bottom: 4em;"></div>
}

<LogView></LogView>

@code {

    public List<PolicyRoomInfo> PolicyRoomList { get; set; } = new();

    private int checkedRoomCount { get; set; } = 0;
    private int totalRoomCount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!RuntimeCache.WasLoaded) await LocalStorageWrapper.LoadFromLocalStorage(LocalStorage);
        await base.OnInitializedAsync();
        if (RuntimeCache.CurrentHomeServer == null)
        {
            NavigationManager.NavigateTo("/Login");
            return;
        }
        await EnumeratePolicyRooms();
        Console.WriteLine("Policy list editor initialized!");
    }

    private async Task EnumeratePolicyRooms()
    {
        using HttpClient wc = new();
        wc.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", RuntimeCache.AccessToken);

    //get room list
    //temporary hack until rooms get enumerated...
        string[] rooms = { "!fTjMjIzNKEsFlUIiru:neko.dev" };
        var _rooms = await wc.GetAsync($"{RuntimeCache.CurrentHomeserver}/_matrix/client/v3/joined_rooms");
        Console.WriteLine($"Got {_rooms.StatusCode}...");
        if (!_rooms.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed to get rooms: {await _rooms.Content.ReadAsStringAsync()}");
            return;
        }
        var _rooms_o = await _rooms.Content.ReadFromJsonAsync<JsonElement>();
        if (_rooms_o.TryGetProperty("joined_rooms", out JsonElement _rooms_j))
        {
            rooms = _rooms_j.EnumerateArray().Select(x => x.GetString()).ToArray();
        }

        totalRoomCount = rooms.Length;
        StateHasChanged();

        var semaphore = new SemaphoreSlim(128);
        var tasks = new List<Task<PolicyRoomInfo?>>();
        foreach (string room in rooms)
        {
            tasks.Add(GetPolicyRoomInfo(room, semaphore));
        }
        var results = await Task.WhenAll(tasks);
        PolicyRoomList.AddRange(results.Where(x => x != null).Select(x=>x.Value));
        
        StateHasChanged();
    }

    private async Task<PolicyRoomInfo?> GetPolicyRoomInfo(string room, SemaphoreSlim semaphore)
    {
        try
        {
            await semaphore.WaitAsync();
            var roomInfo = new PolicyRoomInfo()
            {
                RoomId = room
            };
            using HttpClient wc = new();
            wc.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", RuntimeCache.AccessToken);
            var sk = await wc.GetAsync($"{RuntimeCache.CurrentHomeserver}/_matrix/client/v3/rooms/{room}/state/m.room.name");
            if (sk.IsSuccessStatusCode)
            {
                Console.WriteLine($"Got content: {await sk.Content.ReadAsStringAsync()}");
                var sko = await sk.Content.ReadFromJsonAsync<JsonElement>();
                if (sko.TryGetProperty("name", out JsonElement shortcode))
                {
                    Console.WriteLine($"Room {room} has a name: {shortcode.GetString()}!");
                    roomInfo.Name = shortcode.GetString();
                }
                else Console.WriteLine("No record found...");
            }
            else if (sk.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
            }
            else Console.WriteLine($"Got failure while checking {room}: {sk.StatusCode} ({await sk.Content.ReadAsStringAsync()})...");
            return roomInfo;
        }
        finally
        {
            checkedRoomCount++;
            StateHasChanged();
            semaphore.Release();
        }
    }


    public struct PolicyRoomInfo
    {
        public string RoomId { get; set; }
        public string Name { get; set; }
    }
} 