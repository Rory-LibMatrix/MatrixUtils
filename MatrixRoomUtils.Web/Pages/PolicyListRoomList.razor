@page "/PolicyListEditor"
@using System.Net.Http.Headers
@using System.Text.Json
@using MatrixRoomUtils.Core
@using MatrixRoomUtils.Core.Extensions
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
<h3>Policy list editor</h3>

<h5>Room list</h5>
<hr/>
@if (PolicyRoomList.Count == 0)
{
    <p>No policy rooms found.</p>
    <p>Loading progress: @checkedRoomCount/@totalRoomCount</p>
}
else
{
    @if (checkedRoomCount != totalRoomCount)
    {
        <p>Loading progress: @checkedRoomCount/@totalRoomCount</p>
    }
    foreach (var s in PolicyRoomList)
    {
        <a href="@(NavigationManager.Uri + "/" + s.RoomId.Replace('.', '~'))">[@s.Shortcode] @s.Name (@s.RoomId)</a>
        <br/>
    }
}

<div style="margin-bottom: 4em;"></div>
<LogView></LogView>

@code {
    //get room list
    // - sync withroom list filter
    // type = support.feline.msc3784
    //support.feline.policy.lists.msc.v1

    public List<PolicyRoomInfo> PolicyRoomList { get; set; } = new();

    private int checkedRoomCount { get; set; } = 0;
    private int totalRoomCount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!RuntimeCache.WasLoaded) await LocalStorageWrapper.LoadFromLocalStorage(LocalStorage);
        await base.OnInitializedAsync();
        if (RuntimeCache.CurrentHomeServer == null)
        {
            NavigationManager.NavigateTo("/Login");
            return;
        }
        await EnumeratePolicyRooms();
        Console.WriteLine("Policy list editor initialized!");
    }

    private async Task EnumeratePolicyRooms()
    {
        var xxxrooms = await RuntimeCache.CurrentHomeServer.GetJoinedRooms();
        totalRoomCount = xxxrooms.Count;
        StateHasChanged();

        var xxxsemaphore = new SemaphoreSlim(256);
        var xxxtasks = new List<Task<PolicyRoomInfo?>>();
        foreach (var room in xxxrooms)
        {
            xxxtasks.Add(GetPolicyRoomInfo(room.RoomId, xxxsemaphore));
        }
        var xxxresults = await Task.WhenAll(xxxtasks);
        PolicyRoomList.AddRange(xxxresults.Where(x => x != null).Select(x => x.Value));

        Console.WriteLine($"Detected policy lists: {PolicyRoomList.ToJson()}");
        return;
    /*
        using HttpClient wc = new();
        wc.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", LocalStorageWrapper.AccessToken);

        
        
    //get room list
    //temporary hack until rooms get enumerated...
        string[] rooms = { "!fTjMjIzNKEsFlUIiru:neko.dev" };
        var _rooms = await wc.GetAsync($"{LocalStorageWrapper.CurrentHomeserver}/_matrix/client/v3/joined_rooms");
        Console.WriteLine($"Got {_rooms.StatusCode}...");
        if (!_rooms.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed to get rooms: {await _rooms.Content.ReadAsStringAsync()}");
            return;
        }
        var _rooms_o = await _rooms.Content.ReadFromJsonAsync<JsonElement>();
        if (_rooms_o.TryGetProperty("joined_rooms", out JsonElement _rooms_j))
        {
            rooms = _rooms_j.EnumerateArray().Select(x => x.GetString()).ToArray();
        }

        totalRoomCount = rooms.Length;
        StateHasChanged();

        var semaphore = new SemaphoreSlim(256);
        var tasks = new List<Task<PolicyRoomInfo?>>();
        foreach (string room in rooms)
        {
            tasks.Add(GetPolicyRoomInfo(room, semaphore));
        }
        var results = await Task.WhenAll(tasks);
        PolicyRoomList.AddRange(results.Where(x => x != null).Select(x => x.Value));


    //print to console
        Console.WriteLine($"Detected policy lists: {PolicyRoomList.ToJson()}");
        */
    }

    private async Task<PolicyRoomInfo?> GetPolicyRoomInfo(string room, SemaphoreSlim semaphore)
    {
        try
        {
    //TODO: refactor!!!!!
            await semaphore.WaitAsync();
            PolicyRoomInfo roomInfo = new()
            {
                RoomId = room
            };


    // --- //
            var r = await RuntimeCache.CurrentHomeServer.GetRoom(room);
            roomInfo.Shortcode = (await r.GetStateAsync("org.matrix.mjolnir.shortcode")).Value.GetProperty("shortcode").GetString();

            if (roomInfo.Shortcode != null)
            {
                roomInfo.Name = await r.GetNameAsync();
                return roomInfo;
            }

            return null;
        }
        finally

        {
            checkedRoomCount++;
            StateHasChanged();
            semaphore.Release();
        }
    }

    public struct PolicyRoomInfo

    {
        public
            string RoomId { get; set; }

        public
            string? Shortcode { get; set; }

        public
            string? Name { get; set; }
    }
    } 