@page "/User/Profile"
@using LibMatrix
@using LibMatrix.EventTypes.Spec.State.RoomInfo
@using LibMatrix.Responses
@using MatrixUtils.Abstractions
<h3>Manage Profile - @Homeserver?.WhoAmI?.UserId</h3>
<hr/>

@if (NewProfile is not null) {
    <h4>Profile</h4>
    <hr/>
    <div>
        <MxcAvatar MxcUri="@NewProfile.AvatarUrl" Circular="true" Size="96"/>
        <div style="display: inline-block; vertical-align: middle;">
            <span>Display name: </span><FancyTextBox @bind-Value="@NewProfile.DisplayName"></FancyTextBox><br/>
            <span>Avatar URL: </span><FancyTextBox @bind-Value="@NewProfile.AvatarUrl"></FancyTextBox>
            <InputFile OnChange="@AvatarChanged"></InputFile><br/>
            <LinkButton OnClick="@(() => UpdateProfile())">Update profile</LinkButton>
            <LinkButton OnClick="@(() => UpdateProfile(true))">Update profile (restore room overrides)</LinkButton>
        </div>
    </div>
    @if (!string.IsNullOrWhiteSpace(Status)) {
        <p>@Status</p>
    }

    <br/>

    @* <details> *@
    <h4>Room profiles<hr></h4>

    @foreach (var room in Rooms) {
        <details class="details-compact">
            <summary style="@(room.OwnMembership?.DisplayName == OldProfile.DisplayName && room.OwnMembership?.AvatarUrl == OldProfile.AvatarUrl ? "" : "#ffff0033")">
                <div style="display: inline-block; width: calc(100% - 50px); vertical-align: middle; margin-top: -8px; margin-bottom: -8px;">
                    <CascadingValue Value="OldProfile">
                        <RoomListItem Homeserver="Homeserver" ShowOwnProfile="true" RoomInfo="@room" OwnMemberState="@room.OwnMembership"></RoomListItem>
                    </CascadingValue>
                </div>
            </summary>
            @if (room.OwnMembership is not null) {
                @* <img src="@Homeserver.ResolveMediaUri(room.OwnMembership.AvatarUrl)" style="width: 96px; height: 96px; border-radius: 50%; object-fit: cover;"/> *@
                <MxcAvatar MxcUri="@room.OwnMembership.AvatarUrl" Circular="true" Size="96"/>
                <div style="display: inline-block; vertical-align: middle;">
                    <span>Display name: </span><FancyTextBox BackgroundColor="@(room.OwnMembership.DisplayName == OldProfile.DisplayName ? "" : "#ffff0033")" @bind-Value="@room.OwnMembership.DisplayName"></FancyTextBox><br/>
                    <span>Avatar URL: </span><FancyTextBox BackgroundColor="@(room.OwnMembership.AvatarUrl == OldProfile.AvatarUrl ? "" : "#ffff0033")" @bind-Value="@room.OwnMembership.AvatarUrl"></FancyTextBox>
                    <InputFile OnChange="@(ifcea => RoomAvatarChanged(ifcea, room.Room.RoomId))"></InputFile><br/>
                    <LinkButton OnClick="@(() => UpdateRoomProfile(room.Room.RoomId))">Update profile</LinkButton>
                </div>
                <br/>
                @if (!string.IsNullOrWhiteSpace(Status)) {
                    <p>@Status</p>
                }
            }
            else {
                <p>Something went wrong, own membership is missing...</p>
            }
        </details>
        <br/>
    }
    // </details>
}

@code {
    private string? _status;

    private AuthenticatedHomeserverGeneric? Homeserver { get; set; }
    private UserProfileResponse? NewProfile { get; set; }
    private UserProfileResponse? OldProfile { get; set; }

    private string? Status {
        get => _status;
        set {
            _status = value;
            StateHasChanged();
        }
    }

    private List<RoomInfo> Rooms { get; set; } = new();
    private Dictionary<string, RoomMemberEventContent> RoomProfiles { get; set; } = new();
    private Dictionary<string, string> RoomNames { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        Homeserver = await RmuStorage.GetCurrentSessionOrNavigate();
        if (Homeserver is null) return;
        Status = "Loading global profile...";
        if (Homeserver.WhoAmI?.UserId is null) return;
        NewProfile = (await Homeserver.GetProfileAsync(Homeserver.WhoAmI.UserId)); //.DeepClone();
        OldProfile = (await Homeserver.GetProfileAsync(Homeserver.WhoAmI.UserId)); //.DeepClone();
        Status = "Loading room profiles...";
        var roomProfiles = Homeserver.GetRoomProfilesAsync();
        List<Task> roomInfoTasks = [];
        await foreach (var (roomId, roomProfile) in roomProfiles) {
            var task = Task.Run(async () => {
                var room = Homeserver.GetRoom(roomId);
                var roomNameTask = room.GetNameOrFallbackAsync();
                var roomIconTask = room.GetAvatarUrlAsync();
                var roomInfo = new RoomInfo(room) {
                    OwnMembership = roomProfile
                };
                try {
                    roomInfo.RoomIcon = (await roomIconTask).Url;
                }
                catch (MatrixException e) {
                    if (e is not { ErrorCode: "M_NOT_FOUND" }) throw;
                }

                try {
                    RoomNames[roomId] = roomInfo.RoomName = await roomNameTask;
                }
                catch (MatrixException e) {
                    if (e is not { ErrorCode: "M_NOT_FOUND" }) throw;
                }

                Rooms.Add(roomInfo);
                // Status = $"Got profile for {roomId}...";
                RoomProfiles[roomId] = roomProfile; //.DeepClone();
            });
            roomInfoTasks.Add(task);
        }
        
        await Task.WhenAll(roomInfoTasks);

        StateHasChanged();
        Status = "Room profiles loaded, loading room names...";

        // var roomNameTasks = RoomProfiles.Keys.Select(x => Homeserver.GetRoom(x)).Select(async x => {
        // var name = await x.GetNameOrFallbackAsync();
        // return new KeyValuePair<string, string?>(x.RoomId, name);
        // }).ToAsyncEnumerable();

        // await foreach (var (roomId, roomName) in roomNameTasks) {
        // Status = $"Got room name for {roomId}: {roomName}";
        // RoomNames[roomId] = roomName;
        // }

        StateHasChanged();
        Status = null;

        await base.OnInitializedAsync();
    }

    private async Task AvatarChanged(InputFileChangeEventArgs arg) {
        var res = await Homeserver.UploadFile(arg.File.Name, arg.File.OpenReadStream(Int64.MaxValue), arg.File.ContentType);
        Console.WriteLine(res);
        NewProfile.AvatarUrl = res;
        StateHasChanged();
    }

    private async Task UpdateProfile(bool restoreRoomProfiles = false) {
        Status = "Busy processing global profile update, please do not leave this page...";
        StateHasChanged();
        await Homeserver.UpdateProfileAsync(NewProfile, restoreRoomProfiles);
        Status = null;
        StateHasChanged();
        await OnInitializedAsync();
    }

    private async Task RoomAvatarChanged(InputFileChangeEventArgs arg, string roomId) {
        var res = await Homeserver.UploadFile(arg.File.Name, arg.File.OpenReadStream(Int64.MaxValue), arg.File.ContentType);
        Console.WriteLine(res);
        RoomProfiles[roomId].AvatarUrl = res;
        StateHasChanged();
    }

    private async Task UpdateRoomProfile(string roomId) {
        Status = "Busy processing room profile update, please do not leave this page...";
        StateHasChanged();
        var room = Homeserver.GetRoom(roomId);
        await room.SendStateEventAsync("m.room.member", Homeserver.WhoAmI.UserId, RoomProfiles[roomId]);
        Status = null;
        StateHasChanged();
    }

}