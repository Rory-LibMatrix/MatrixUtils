@page "/Login"
@using System.Text.Json
@using LibMatrix.Responses
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
<h3>Login</h3>
<hr/>

<span>
    <span>@@</span><!--
    --><FancyTextBox @bind-Value="@newRecordInput.username"></FancyTextBox><!--
    --><span>:</span><!--
    --><FancyTextBox @bind-Value="@newRecordInput.homeserver"></FancyTextBox>
    via
    <FancyTextBox @bind-Value="@newRecordInput.password" IsPassword="true"></FancyTextBox>
</span>
<span style="display: block;">
    <label>Password:</label>
    <FancyTextBox @bind-Value="@newRecordInput.password" IsPassword="true"></FancyTextBox>
</span>
<button @onclick="AddRecord">Add account to queue</button>
<br/>

<InputFile OnChange="@FileChanged" accept=".tsv"></InputFile>
<br/>
<br/><br/>
<h4>Parsed records</h4>
<hr/>
<table border="1">
    <thead>
        <td>Username</td>
        <td>Homeserver</td>
        <td>Password</td>
        <td>Proxy</td>
    </thead>
    @foreach (var record in records) {
        var r = record;
        <tr style="background-color: @(LoggedInSessions.Any(x => x.UserId == $"@{r.username}:{r.homeserver}" && x.Proxy == r.proxy) ? "green" : "unset")">
            <td style="border-width: 1px;">
                <FancyTextBox @bind-Value="@r.homeserver"></FancyTextBox>
            </td>
            <td style="border-width: 1px;">
                <FancyTextBox @bind-Value="@r.username"></FancyTextBox>
            </td>
            <td style="border-width: 1px;">
                <FancyTextBox @bind-Value="@r.password" IsPassword="true"></FancyTextBox>
            </td>
            <td style="border-width: 1px;">
                <FancyTextBox @bind-Value="@r.proxy"></FancyTextBox>
            </td>
            <td>
                <a role="button" @onclick="() => records.Remove(r)">Remove</a>
            </td>
        </tr>
    }
</table>
<br/>
<button @onclick="Login">Login</button>
<br/>
<LogView></LogView>

@code {
    readonly List<(string homeserver, string username, string password, string? proxy)> records = new();
    (string homeserver, string username, string password, string? proxy) newRecordInput = ("", "", "", null);

    List<UserAuth>? LoggedInSessions { get; set; } = new();

    async Task Login() {
        var loginTasks = records.Select(async record => {
            var (homeserver, username, password, proxy) = record;
            if (LoggedInSessions.Any(x => x.UserId == $"@{username}:{homeserver}" && x.Proxy == proxy)) return;
            try {
                var result = new UserAuth(await HomeserverProvider.Login(homeserver, username, password, proxy)) {
                    Proxy = proxy
                };
                if (result == null) {
                    Console.WriteLine($"Failed to login to {homeserver} as {username}!");
                    return;
                }
                Console.WriteLine($"Obtained access token for {result.UserId}!");

                await MRUStorage.AddToken(result);
                LoggedInSessions = await MRUStorage.GetAllTokens();
            }
            catch (Exception e) {
                Console.WriteLine($"Failed to login to {homeserver} as {username}!");
                Console.WriteLine(e);
            }
            StateHasChanged();
        });
        await Task.WhenAll(loginTasks);
    }

    private async Task FileChanged(InputFileChangeEventArgs obj) {
        LoggedInSessions = await MRUStorage.GetAllTokens();
        Console.WriteLine(JsonSerializer.Serialize(obj, new JsonSerializerOptions {
            WriteIndented = true
        }));
        await using var rs = obj.File.OpenReadStream();
        using var sr = new StreamReader(rs);
        var tsvData = await sr.ReadToEndAsync();
        records.Clear();
        foreach (var line in tsvData.Split('\n')) {
            string?[] parts = line.Split('\t');
            if (parts.Length < 3)
                continue;
            string? via = parts.Length > 3 ? parts[3] : null;
            records.Add((parts[0], parts[1], parts[2], via));
        }
    }

    private async Task AddRecord() {
        LoggedInSessions = await MRUStorage.GetAllTokens();
        records.Add(newRecordInput);
        newRecordInput = ("", "", "", null);
    }

}
