@page "/Login"
@using System.Text.Json
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
<h3>Login</h3>
<hr/>

<span>
    <span>@@</span><!--
    --><FancyTextBox @bind-Value="@newRecordInput.Username"></FancyTextBox><!--
    --><span>:</span><!--
    --><FancyTextBox @bind-Value="@newRecordInput.Homeserver"></FancyTextBox>
    via
    <FancyTextBox @bind-Value="@newRecordInput.Proxy"></FancyTextBox>
</span>
<span style="display: block;">
    <label>Password:</label>
    <FancyTextBox @bind-Value="@newRecordInput.Password" IsPassword="true"></FancyTextBox>
</span>
<button @onclick="AddRecord">Add account to queue</button>
<br/>

<InputFile OnChange="@FileChanged" accept=".tsv"></InputFile>
<br/>
<br/><br/>
<h4>Parsed records</h4>
<hr/>
<table border="1">
    <thead>
        <td>Username</td>
        <td>Homeserver</td>
        <td>Password</td>
        <td>Proxy</td>
    </thead>
    @foreach (var record in records) {
        var r = record;
        <tr style="background-color: @(LoggedInSessions.Any(x => x.UserId == $"@{r.Username}:{r.Homeserver}" && x.Proxy == r.Proxy) ? "green" : "unset")">
            <td style="border-width: 1px;">
                <FancyTextBox @bind-Value="@r.Username"></FancyTextBox>
            </td>
            <td style="border-width: 1px;">
                <FancyTextBox @bind-Value="@r.Homeserver"></FancyTextBox>
            </td>
            <td style="border-width: 1px;">
                <FancyTextBox @bind-Value="@r.Password" IsPassword="true"></FancyTextBox>
            </td>
            <td style="border-width: 1px;">
                <FancyTextBox @bind-Value="@r.Proxy"></FancyTextBox>
            </td>
            <td>
                <a role="button" @onclick="() => records.Remove(r)">Remove</a>
            </td>
        </tr>
    }
</table>
<br/>
<button @onclick="Login">Login</button>
<br/>
<LogView></LogView>

@code {
    readonly List<LoginStruct> records = new();
    private LoginStruct newRecordInput = new();

    List<UserAuth>? LoggedInSessions { get; set; } = new();

    async Task Login() {
        var loginTasks = records.Select(async record => {
            if (LoggedInSessions.Any(x => x.UserId == $"@{record.Username}:{record.Homeserver}" && x.Proxy == record.Proxy)) return;
            try {
                var result = new UserAuth(await hsProvider.Login(record.Homeserver, record.Username, record.Password, record.Proxy)) {
                    Proxy = record.Proxy
                };
                if (result == null) {
                    Console.WriteLine($"Failed to login to {record.Homeserver} as {record.Username}!");
                    return;
                }
                Console.WriteLine($"Obtained access token for {result.UserId}!");

                await MRUStorage.AddToken(result);
                LoggedInSessions = await MRUStorage.GetAllTokens();
            }
            catch (Exception e) {
                Console.WriteLine($"Failed to login to {record.Homeserver} as {record.Username}!");
                Console.WriteLine(e);
            }
            StateHasChanged();
        });
        await Task.WhenAll(loginTasks);
    }

    private async Task FileChanged(InputFileChangeEventArgs obj) {
        LoggedInSessions = await MRUStorage.GetAllTokens();
        Console.WriteLine(JsonSerializer.Serialize(obj, new JsonSerializerOptions {
            WriteIndented = true
        }));
        await using var rs = obj.File.OpenReadStream();
        using var sr = new StreamReader(rs);
        var tsvData = await sr.ReadToEndAsync();
        records.Clear();
        foreach (var line in tsvData.Split('\n')) {
            string?[] parts = line.Split('\t');
            if (parts.Length < 3)
                continue;
            string? via = parts.Length > 3 ? parts[3] : null;
            records.Add(new() { Homeserver = parts[0], Username = parts[1], Password = parts[2], Proxy = via });
        }
    }

    private async Task AddRecord() {
        LoggedInSessions = await MRUStorage.GetAllTokens();
        records.Add(newRecordInput);
        newRecordInput = new();
    }

    private class LoginStruct {
        public string? Homeserver { get; set; } = "";
        public string? Username { get; set; } = "";
        public string? Password { get; set; } = "";
        public string? Proxy { get; set; }
    }

}