@page "/HSAdmin/RoomQuery"
@using MatrixRoomUtils.Core.Extensions
@using MatrixRoomUtils.Core.Responses.Admin
<h3>Homeserver Administration - Room Query</h3>

<label>Search name: </label>
<InputText @bind-Value="SearchTerm"/><br/>
<label>Search id/name/creator (slow!): </label>
<InputText @bind-Value="ContentSearchTerm"/><br/>
<label>Order by: </label>
<select @bind="OrderBy">
    @foreach (var item in validOrderBy) {
        <option value="@item.Key">@item.Value</option>
    }
</select><br/>
<label>Ascending: </label>
<InputCheckbox @bind-Value="Ascending"/><br/>
<button class="btn btn-primary" @onclick="Search">Search</button>
<br/>

@if (Results.Count > 0) {
    <p>Found @Results.Count rooms</p>
}

@foreach (var res in Results) {
    <div style="background-color: #ffffff11; border-radius: 0.5em; display: block; margin-top: 4px; padding: 4px;">
        <RoomListItem RoomName="@res.Name" RoomId="@res.RoomId"></RoomListItem>
        <p>
            @if (!string.IsNullOrWhiteSpace(res.CanonicalAlias)) {
                <span>@res.CanonicalAlias (@res.RoomId)</span><br/>
            }
            else {
                <span>@res.RoomId</span><br/>
            }
            @if (!string.IsNullOrWhiteSpace(res.Creator)) {
                <span>Created by <InlineUserItem UserId="@res.Creator"></InlineUserItem></span><br/>
            }
        </p>
        <span>@res.StateEvents state events</span><br/>
        <span>@res.JoinedMembers members, of which @res.JoinedLocalMembers are on this server</span>
    </div>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "order_by")]
    public string? OrderBy { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "name_search")]
    public string SearchTerm { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "content_search")]
    public string ContentSearchTerm { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ascending")]
    public bool Ascending { get; set; }

    public List<AdminRoomListingResult.AdminRoomListingResultRoom> Results { get; set; } = new();

    private string Status { get; set; }

    protected override async Task OnParametersSetAsync() {
        if (Ascending == null)
            Ascending = true;
        OrderBy ??= "name";
    }

    private async Task Search() {
        Results.Clear();
        var searchRooms = RuntimeCache.CurrentHomeServer.Admin.SearchRoomsAsync(orderBy: OrderBy!, dir: Ascending ? "f" : "b", searchTerm: SearchTerm, contentSearch: ContentSearchTerm).GetAsyncEnumerator();
        while (await searchRooms.MoveNextAsync()) {
            var room = searchRooms.Current;
            Console.WriteLine("Hit: " + room.ToJson(false));
            Results.Add(room);
            if (Results.Count % 10 == 0)
                StateHasChanged();
        }
    }

    private readonly Dictionary<string, string> validOrderBy = new() {
        { "name", "Room name" },
        { "canonical_alias", "Main alias address" },
        { "joined_members", "Number of members (reversed)" },
        { "joined_local_members", "Number of local members (reversed)" },
        { "version", "Room version" },
        { "creator", "Creator of the room" },
        { "encryption", "End-to-end encryption algorithm" },
        { "federatable", "Is room federated" },
        { "public", "Visibility in room list" },
        { "join_rules", "Join rules" },
        { "guest_access", "Guest access" },
        { "history_visibility", "Visibility of history" },
        { "state_events", "Number of state events" }
    };

}