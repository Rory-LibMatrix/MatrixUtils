@using LibMatrix.RoomTypes
@using LibMatrix
@using LibMatrix.Responses
@using MatrixUtils.LibDMSpace
@using MatrixUtils.LibDMSpace.StateEvents
@using ArcaneLibs.Extensions
@using LibMatrix.EventTypes.Spec.State.RoomInfo
@using LibMatrix.EventTypes.Spec.State.Space
@using MatrixUtils.Abstractions
<b>
    <u>DM Space setup tool - stage 1: Configure space</u>
</b>
<p>You will need a space to use for DM rooms.</p>
@if (SetupData is not null) {
    if (SetupData.Spaces is not null) {
        <p>
            Selected space:
            <InputSelect @bind-Value="SetupData.DmSpaceConfiguration.DMSpaceId">
                <option value="">New space</option>
                @foreach (var (id, roomInfo) in SetupData.Spaces) {
                    <option value="@id">@roomInfo.RoomName</option>
                }
            </InputSelect>
        </p>
        <p>
            <InputCheckbox @bind-Value="SetupData.DmSpaceInfo.LayerByUser"></InputCheckbox>
            Create sub-spaces per user
        </p>
        
        <br/>
        <LinkButton OnClick="@Disband" Color="#FF0000">Disband</LinkButton>
        <LinkButton OnClick="@Execute">Next</LinkButton>
    }
    else {
        <p>Discovering spaces, please wait...</p>
    }
}
else {
    <b>Error: Setup data is null!</b>
}


@if (!string.IsNullOrWhiteSpace(Status)) {
    <p>@Status</p>
}

@code {

    private string? Status {
        get => _status;
        set {
            _status = value;
            StateHasChanged();
        }
    }

    private string? _status;

    [CascadingParameter]
    public DMSpace.DMSpaceSetupData SetupData { get; set; }

    SemaphoreSlim _semaphoreSlim = new(1, 1);

    protected override async Task OnInitializedAsync() {
        if (SetupData is null)
            return;

        await _semaphoreSlim.WaitAsync();

        Dictionary<string, RoomInfo> spaces = [];
        SetupData.DmSpaceConfiguration ??= new();

        Status = "Looking for spaces...";
        var userRoomsEnum = SetupData.Homeserver!.GetJoinedRoomsByType("m.space");

        List<GenericRoom> userRooms = new();
        await foreach (var room in userRoomsEnum) {
            userRooms.Add(room);
        }

        var roomChecks = userRooms.Select(GetFeasibleSpaces).ToAsyncEnumerable();
        await foreach (var room in roomChecks)
            if (room.HasValue)
                spaces.TryAdd(room.Value.id, room.Value.roomInfo);

        SetupData.Spaces = spaces;

        Status = "Done!";
        _semaphoreSlim.Release();
        await base.OnParametersSetAsync();
    }

    private async Task Execute() {
        if (string.IsNullOrWhiteSpace(SetupData!.DmSpaceConfiguration!.DMSpaceId)) {
            var createRoomRequest = CreateRoomRequest.CreatePrivate(SetupData.Homeserver!, "Direct Messages");
            createRoomRequest.CreationContentBaseType.Type = "m.space";
            SetupData.DmSpaceConfiguration.DMSpaceId = (await SetupData.Homeserver!.CreateRoom(createRoomRequest)).RoomId;
        }

        await SetupData.Homeserver!.SetAccountDataAsync(DMSpaceConfiguration.EventId, SetupData.DmSpaceConfiguration);
        var space = SetupData.Homeserver.GetRoom(SetupData.DmSpaceConfiguration.DMSpaceId);
        await space.SendStateEventAsync(DMSpaceInfo.EventId, SetupData.DmSpaceInfo);
        SetupData.DMSpaceRoomInfo = new RoomInfo(space);
        await SetupData.DMSpaceRoomInfo.FetchAllStateAsync();

        NavigationManager.NavigateTo("/User/DMSpace/Setup?stage=2");
    }

    public async Task<(string id, RoomInfo roomInfo)?> GetFeasibleSpaces(GenericRoom room) {
        try {
            var ri = new RoomInfo(room);
            
            await foreach(var evt in room.GetFullStateAsync())
                ri.StateEvents.Add(evt);

            var powerLevels = (await ri.GetStateEvent(RoomPowerLevelEventContent.EventId)).TypedContent as RoomPowerLevelEventContent;
            if (!powerLevels.UserHasStatePermission(SetupData.Homeserver.WhoAmI.UserId, SpaceChildEventContent.EventId)) {
                Console.WriteLine($"No permission to send m.space.child in {room.RoomId}...");
                return null;
            }
            
            Status = $"Found viable space: {ri.RoomName}";
            if (!string.IsNullOrWhiteSpace(SetupData.DmSpaceConfiguration!.DMSpaceId)) {
                if (await room.GetStateOrNullAsync<DMSpaceInfo>(DMSpaceInfo.EventId) is { } dsi) {
                    SetupData.DmSpaceConfiguration.DMSpaceId = room.RoomId;
                    SetupData.DmSpaceInfo = dsi;
                    Console.WriteLine(dsi.ToJson(ignoreNull: true));
                }
            }

            if (ri.RoomName == room.RoomId)
                ri.RoomName = await room.GetNameOrFallbackAsync();

            return (room.RoomId, ri);
        }
        catch (MatrixException e) {
            if (e.ErrorCode == "M_NOT_FOUND") Console.WriteLine($"m.room.power_levels does not exist in {room.RoomId}!!!");
            else throw;
        }

        return null;
    }

    private async Task Disband() {
        var space = new DMSpaceRoom(SetupData.Homeserver, SetupData.DmSpaceConfiguration.DMSpaceId);
        await space.DisbandDMSpace();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}