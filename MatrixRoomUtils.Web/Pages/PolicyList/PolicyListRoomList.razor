@page "/PolicyListEditor"
@using System.Text.Json
@using MatrixRoomUtils.Core.Extensions
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
<h3>Policy list editor - Room list</h3>
<hr/>

@if (PolicyRoomList.Count == 0)
{
    <p>No policy rooms found.</p>
    <p>Loading progress: @checkedRoomCount/@totalRoomCount</p>
}
else
{
    @if (checkedRoomCount != totalRoomCount)
    {
        <p>Loading progress: @checkedRoomCount/@totalRoomCount</p>
    }
    foreach (var s in PolicyRoomList)
    {
        
        <a style="color: unset; text-decoration: unset;" href="/PolicyListEditor/@s.RoomId.Replace('.','~')"><RoomListItem RoomId="@s.RoomId">
            <br/>
            <span>Shortcode: @s.Shortcode</span>
        </RoomListItem></a>
        @* <a href="@(NavigationManager.Uri + "/" + s.RoomId.Replace('.', '~'))">[@s.Shortcode] @s.Name (@s.RoomId)</a> *@
        @* <br/> *@
    }
}

<div style="margin-bottom: 4em;"></div>
<LogView></LogView>

@code {
    //get room list
    // - sync withroom list filter
    // Type = support.feline.msc3784
    //support.feline.policy.lists.msc.v1

    public List<PolicyRoomInfo> PolicyRoomList { get; set; } = new();

    private int checkedRoomCount { get; set; } = 0;
    private int totalRoomCount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await LocalStorageWrapper.LoadFromLocalStorage(LocalStorage);
        await base.OnInitializedAsync();
        if (RuntimeCache.CurrentHomeServer == null)
        {
            NavigationManager.NavigateTo("/Login");
            return;
        }
        await EnumeratePolicyRooms();
        Console.WriteLine("Policy list editor initialized!");
    }

    private async Task EnumeratePolicyRooms()
    {
        var xxxrooms = await RuntimeCache.CurrentHomeServer.GetJoinedRooms();
        totalRoomCount = xxxrooms.Count;
        StateHasChanged();

        var xxxsemaphore = new SemaphoreSlim(1000);
        var xxxtasks = new List<Task<PolicyRoomInfo?>>();
        foreach (var room in xxxrooms)
        {
            xxxtasks.Add(GetPolicyRoomInfo(room.RoomId, xxxsemaphore));
        }
        var xxxresults = await Task.WhenAll(xxxtasks);
        PolicyRoomList.AddRange(xxxresults.Where(x => x != null).Select(x => x.Value));

        Console.WriteLine($"Detected policy lists: {PolicyRoomList.ToJson()}");
        return;
    }

    private async Task<PolicyRoomInfo?> GetPolicyRoomInfo(string room, SemaphoreSlim semaphore)
    {
        try
        {
            await semaphore.WaitAsync();
            PolicyRoomInfo roomInfo = new()
            {
                RoomId = room
            };
            var r = await RuntimeCache.CurrentHomeServer.GetRoom(room);
            var shortcodeState = await r.GetStateAsync("org.matrix.mjolnir.shortcode");
            if(!shortcodeState.HasValue) return null;
            roomInfo.Shortcode = shortcodeState.Value.TryGetProperty("shortcode", out JsonElement shortcode) ? shortcode.GetString() : null;

            if (roomInfo.Shortcode != null)
            {
                roomInfo.Name = await r.GetNameAsync();
                return roomInfo;
            }

            return null;
        }
        finally

        {
            checkedRoomCount++;
            StateHasChanged();
            semaphore.Release();
        }
    }

    public struct PolicyRoomInfo

    {
        public
            string RoomId { get; set; }

        public
            string? Shortcode { get; set; }

        public
            string? Name { get; set; }
    }
    } 