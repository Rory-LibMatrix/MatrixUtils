@page "/HSAdmin/Synapse/RoomQuery"
@using Microsoft.AspNetCore.WebUtilities
@using ArcaneLibs.Extensions
@using LibMatrix.Homeservers.ImplementationDetails.Synapse.Models.Filters
@using LibMatrix.Homeservers.ImplementationDetails.Synapse.Models.Requests
@using LibMatrix.Homeservers.ImplementationDetails.Synapse.Models.Responses
@using MatrixUtils.Web.Pages.HSAdmin.Synapse.Components

<h3>Homeserver Administration - Room Query</h3>

<label>Search name: </label>
<InputText @bind-Value="SearchTerm"/><br/>
<label>Order by: </label>
<select @bind="OrderBy">
    @foreach (var item in validOrderBy) {
        <option value="@item.Key">@item.Value</option>
    }
</select><br/>
<label>Ascending: </label>
<InputCheckbox @bind-Value="Ascending"/><br/>
<details>
    <summary>
        <span>Local filtering (slow)</span>

    </summary>
    <div style="margin-left: 8px; margin-bottom: 8px;">
        <u style="display: block;">String contains</u>
        <span class="tile tile280">Room ID: <FancyTextBox @bind-Value="@Filter.RoomIdContains"></FancyTextBox></span>
        <span class="tile tile280">Room name: <FancyTextBox @bind-Value="@Filter.NameContains"></FancyTextBox></span>
        <span class="tile tile280">Canonical alias: <FancyTextBox @bind-Value="@Filter.CanonicalAliasContains"></FancyTextBox></span>
        <span class="tile tile280">Creator: <FancyTextBox @bind-Value="@Filter.CreatorContains"></FancyTextBox></span>
        <span class="tile tile280">Room version: <FancyTextBox @bind-Value="@Filter.VersionContains"></FancyTextBox></span>
        <span class="tile tile280">Encryption algorithm: <FancyTextBox @bind-Value="@Filter.EncryptionContains"></FancyTextBox></span>
        <span class="tile tile280">Join rules: <FancyTextBox @bind-Value="@Filter.JoinRulesContains"></FancyTextBox></span>
        <span class="tile tile280">Guest access: <FancyTextBox @bind-Value="@Filter.GuestAccessContains"></FancyTextBox></span>
        <span class="tile tile280">History visibility: <FancyTextBox @bind-Value="@Filter.HistoryVisibilityContains"></FancyTextBox></span>

        <u style="display: block;">Optional checks</u>
        <span class="tile tile150">
            <InputCheckbox @bind-Value="@Filter.CheckFederation"></InputCheckbox> Is federated:
            @if (Filter.CheckFederation) {
                <InputCheckbox @bind-Value="@Filter.Federatable"></InputCheckbox>
            }
        </span>
        <span class="tile tile150">
            <InputCheckbox @bind-Value="@Filter.CheckPublic"></InputCheckbox> Is public:
            @if (Filter.CheckPublic) {
                <InputCheckbox @bind-Value="@Filter.Public"></InputCheckbox>
            }
        </span>

        <u style="display: block;">Ranges</u>
        <span class="tile center-children">
            <InputNumber max="@int.MaxValue" class="int-input" TValue="int" @bind-Value="@Filter.StateEventsGreaterThan"></InputNumber><span class="range-sep">state events</span><InputNumber
                max="@int.MaxValue" class="int-input" TValue="int" @bind-Value="@Filter.StateEventsLessThan"></InputNumber>
        </span>
        <span class="tile center-children">
            <InputNumber max="@int.MaxValue" class="int-input" TValue="int" @bind-Value="@Filter.JoinedMembersGreaterThan"></InputNumber><span class="range-sep">members</span><InputNumber
                max="@int.MaxValue" class="int-input" TValue="int" @bind-Value="@Filter.JoinedMembersLessThan"></InputNumber>
        </span>
        <span class="tile center-children">
            <InputNumber max="@int.MaxValue" class="int-input" TValue="int" @bind-Value="@Filter.JoinedLocalMembersGreaterThan"></InputNumber><span
                class="range-sep">local members</span><InputNumber max="@int.MaxValue" class="int-input" TValue="int"
                                                                   @bind-Value="@Filter.JoinedLocalMembersLessThan"></InputNumber>
        </span>
    </div>
</details>
<button class="btn btn-primary" @onclick="Search">Search</button>
<br/>

@if (Results.Count > 0) {
    <p>Found @Results.Count rooms</p>
    <details>
        <summary>TSV data (copy/paste)</summary>
        <pre style="font-size: 0.6em;">
            <table>
                @foreach (var res in Results) {
                    <tr>
                        <td style="padding: 8px;">@res.RoomId@("\t")</td>
                        <td style="padding: 8px;">@res.CanonicalAlias@("\t")</td>
                        <td style="padding: 8px;">@res.Creator@("\t")</td>
                        <td style="padding: 8px;">@res.Name</td>
                    </tr>
                }
            </table>
        </pre>
    </details>
}

@foreach (var res in Results) {
    <div style="background-color: #ffffff11; border-radius: 0.5em; display: block; margin-top: 4px; padding: 4px;">
        @* <RoomListItem RoomName="@res.Name" RoomId="@res.RoomId"></RoomListItem> *@
        <p>
            @if (!string.IsNullOrWhiteSpace(res.CanonicalAlias)) {
                <span>@res.CanonicalAlias - @res.RoomId (@res.Name)</span>
                <br/>
            }
            else {
                <span>@res.RoomId (@res.Name)</span>
                <br/>
            }
            @if (!string.IsNullOrWhiteSpace(res.Creator)) {
                @* <span>Created by <InlineUserItem UserId="@res.Creator"></InlineUserItem></span> *@
                <span>Created by @res.Creator</span>
                <br/>
            }
        </p>
        <p>
            <LinkButton OnClick="@(() => {
                                     DeleteRequests.Add(res.RoomId, new() {
                                         RoomId = res.RoomId,
                                         DeleteRequest = new() {
                                             Block = true,
                                             Purge = true,
                                             ForcePurge = false
                                         }
                                     });
                                     
                                     return Task.CompletedTask;
                                 })">Delete room
            </LinkButton>
        </p>
        <span>@res.StateEvents state events</span><br/>
        @if (res.LocalMembers is null) {
            <span>@res.JoinedMembers members, of which @res.JoinedLocalMembers are on this server</span>
        }
        else {
            <span>@res.JoinedMembers members, of which @res.JoinedLocalMembers are on this server: @(string.Join(", ", res.LocalMembers))</span>
        }
        <details>
            <summary>Full result data</summary>
            <pre>@res.ToJson(ignoreNull: true)</pre>
        </details>
    </div>
}
@* *@
@* @if (DeleteRequest.HasValue) { *@
@*     <ModalWindow MinWidth="600" Title="@("Delete " + DeleteRequest.Value.RoomId)" OnCloseClicked="@(() => { DeleteRequest = null; })"> *@
@*          *@
@*     </ModalWindow> *@
@* } *@

@* @foreach (var (roomId, status) in DeleteStatuses) { *@
@*     <ModalWindow Title="@("Delete status for " + roomId)" MinWidth="600"> *@
@*         <pre>@status.ToJson()</pre> *@
@*     </ModalWindow> *@
@* } *@

@foreach(var (roomId, deleteRequest) in DeleteRequests) {
    <SynapseRoomShutdownWindowContent Context="deleteRequest" Homeserver="Homeserver"/>
}

<style>
    .int-input {
        width: 128px;
    }

    .tile {
        display: inline-block;
        padding: 4px;
        border: 1px solid #ffffff22;
    }

    .tile280 {
        min-width: 280px;
    }

    .tile150 {
        min-width: 150px;
    }

    .range-sep {
        display: inline-block;
        padding: 4px;
        width: 150px;
    }

    .range-sep::before {
        content: "@("<") ";
    }

    .range-sep::after {
        content: " @("<")";
    }

    .center-children {
        text-align: center;
    }
</style>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "order_by")]
    public string? OrderBy { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "name_search")]
    public string SearchTerm { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ascending")]
    public bool Ascending { get; set; }

    private List<RoomInfo> Results { get; set; } = new();

    private AuthenticatedHomeserverSynapse Homeserver { get; set; } = null!;

    private string Status { get; set; }

    public SynapseAdminLocalRoomQueryFilter Filter { get; set; } = new();

    private Dictionary<string, SynapseRoomShutdownWindowContent.RoomShutdownContext> DeleteRequests { get; set; } = [];

    // private Dictionary<string, SynapseAdminRoomDeleteStatus> DeleteStatuses { get; set; } = new();

    protected override Task OnParametersSetAsync() {
        if (Ascending == null)
            Ascending = true;
        OrderBy ??= "name";

        var execute = false;

        foreach (var (key, value) in QueryHelpers.ParseQuery(new Uri(NavigationManager.Uri).Query)) {
            switch (key) {
                case "RoomIdContains":
                    Filter.RoomIdContains = value[0]!;
                    break;
                case "NameContains":
                    Filter.NameContains = value[0]!;
                    break;
                case "CanonicalAliasContains":
                    Filter.CanonicalAliasContains = value[0]!;
                    break;
                case "VersionContains":
                    Filter.VersionContains = value[0]!;
                    break;
                case "CreatorContains":
                    Filter.CreatorContains = value[0]!;
                    break;
                case "EncryptionContains":
                    Filter.EncryptionContains = value[0]!;
                    break;
                case "JoinRulesContains":
                    Filter.JoinRulesContains = value[0]!;
                    break;
                case "GuestAccessContains":
                    Filter.GuestAccessContains = value[0]!;
                    break;
                case "HistoryVisibilityContains":
                    Filter.HistoryVisibilityContains = value[0]!;
                    break;
                case "Federatable":
                    Filter.Federatable = bool.Parse(value[0]!);
                    Filter.CheckFederation = true;
                    break;
                case "Public":
                    Filter.Public = value[0] == "true";
                    Filter.CheckPublic = true;
                    break;
                case "JoinedMembersGreaterThan":
                    Filter.JoinedMembersGreaterThan = int.Parse(value[0]!);
                    break;
                case "JoinedMembersLessThan":
                    Filter.JoinedMembersLessThan = int.Parse(value[0]!);
                    break;
                case "JoinedLocalMembersGreaterThan":
                    Filter.JoinedLocalMembersGreaterThan = int.Parse(value[0]!);
                    break;
                case "JoinedLocalMembersLessThan":
                    Filter.JoinedLocalMembersLessThan = int.Parse(value[0]!);
                    break;
                case "StateEventsGreaterThan":
                    Filter.StateEventsGreaterThan = int.Parse(value[0]!);
                    break;
                case "StateEventsLessThan":
                    Filter.StateEventsLessThan = int.Parse(value[0]!);
                    break;
                case "Execute":
                    execute = true;
                    break;
                default:
                    Console.WriteLine($"Unknown query parameter: {key}");
                    break;
            }
        }

        if (execute)
            _ = Search();

        return Task.CompletedTask;
    }

    private async Task Search() {
        Results.Clear();
        var hs = await sessionStore.GetCurrentHomeserver(navigateOnFailure: true);
        if (hs is AuthenticatedHomeserverSynapse synapse) {
            Homeserver = synapse;
            var searchRooms = synapse.Admin.SearchRoomsAsync(orderBy: OrderBy!, dir: Ascending ? "f" : "b", searchTerm: SearchTerm, localFilter: Filter).GetAsyncEnumerator();
            while (await searchRooms.MoveNextAsync()) {
                var room = searchRooms.Current;

                if (Results.Count < 100)
                    Console.WriteLine("Hit: " + room.ToJson(false));

                var roomInfo = new RoomInfo {
                    RoomId = room.RoomId,
                    Name = room.Name,
                    CanonicalAlias = room.CanonicalAlias,
                    Creator = room.Creator,
                    Version = room.Version,
                    Encryption = room.Encryption,
                    Federatable = room.Federatable,
                    Public = room.Public,
                    JoinRules = room.JoinRules,
                    GuestAccess = room.GuestAccess,
                    HistoryVisibility = room.HistoryVisibility,
                    StateEvents = room.StateEvents,
                    JoinedMembers = room.JoinedMembers,
                    JoinedLocalMembers = room.JoinedLocalMembers
                };

                Results.Add(roomInfo);

                if (room.JoinedLocalMembers is > 0 and < 100)
                    roomInfo.LocalMembers = (await synapse.Admin.GetRoomMembersAsync(room.RoomId)).Members.Where(x => x.EndsWith(":" + synapse.ServerName)).ToList();

                if (Results.Count < 200 || Results.Count % 1000 == 0) {
                    StateHasChanged();
                    await Task.Yield();
                }
            }
        }

        StateHasChanged();
    }
    //
    // private async Task DeleteRoom() {
    //     if (DeleteRequest is { } deleteRequest) {
    //         var media = await Homeserver.Admin.GetRoomMediaAsync(deleteRequest.RoomId);
    //         if (deleteRequest.DeleteRequest.QuarantineRemoteMedia) {
    //             foreach (var remoteMedia in media.Remote) {
    //                 await Homeserver.Admin.QuarantineMediaById(remoteMedia);
    //             }
    //         }
    //
    //         if (deleteRequest.DeleteRequest.DeleteRemoteMedia) {
    //             foreach (var remoteMedia in media.Remote) {
    //                 await Homeserver.Admin.DeleteMediaById(remoteMedia);
    //             }
    //         }
    //         else if (deleteRequest.DeleteRequest.QuarantineLocalMedia) {
    //             foreach (var localMedia in media.Local) {
    //                 await Homeserver.Admin.QuarantineMediaById(localMedia);
    //             }
    //         }
    //
    //         var deleteId = await Homeserver.Admin.DeleteRoom(deleteRequest.RoomId, deleteRequest.DeleteRequest, waitForCompletion: false);
    //         DeleteRequest = null;
    //         List<string> alreadyCleanedUsers = [];
    //         while (true) {
    //             var status = await Homeserver.Admin.GetRoomDeleteStatus(deleteId.DeleteId);
    //             DeleteStatuses[deleteRequest.RoomId] = status;
    //             StateHasChanged();
    //             await Task.Delay(5000);
    //             if (status.Status == "complete") {
    //                 DeleteStatuses.Remove(deleteRequest.RoomId);
    //                 StateHasChanged();
    //                 break;
    //             }
    //
    //             if (status.Status == "failed") {
    //                 deleteId = await Homeserver.Admin.DeleteRoom(deleteRequest.RoomId, deleteRequest.DeleteRequest, waitForCompletion: false);
    //             }
    //
    //             var newCleanedUsers = status.ShutdownRoom?.KickedUsers?.Except(alreadyCleanedUsers).ToList();
    //             if (newCleanedUsers is not null) {
    //                 alreadyCleanedUsers.AddRange(newCleanedUsers);
    //                 foreach (var user in newCleanedUsers) {
    //                     if (deleteRequest.DeleteRequest.SuspendLocalUsers) {
    //                         // await Homeserver.Admin.(user);
    //                     }
    //
    //                     if (deleteRequest.DeleteRequest.QuarantineLocalUserMedia) {
    //                         await Homeserver.Admin.QuarantineMediaByUserId(user);
    //                     }
    //
    //                     if (deleteRequest.DeleteRequest.DeleteLocalUserMedia) {
    //                         var userMedia = Homeserver.Admin.GetUserMediaEnumerableAsync(user);
    //                         await foreach (var mediaEntry in userMedia) {
    //                             await Homeserver.Admin.DeleteMediaById(mediaEntry.MediaId);
    //                         }
    //                     }
    //                 }
    //             }
    //         }
    //     }
    // }

    private readonly Dictionary<string, string> validOrderBy = new() {
        { "name", "Room name" },
        { "canonical_alias", "Main alias address" },
        { "joined_members", "Number of members (reversed)" },
        { "joined_local_members", "Number of local members (reversed)" },
        { "version", "Room version" },
        { "creator", "Creator of the room" },
        { "encryption", "End-to-end encryption algorithm" },
        { "federatable", "Is room federated" },
        { "public", "Visibility in room list" },
        { "join_rules", "Join rules" },
        { "guest_access", "Guest access" },
        { "history_visibility", "Visibility of history" },
        { "state_events", "Number of state events" }
    };

    private class RoomInfo : SynapseAdminRoomListResult.SynapseAdminRoomListResultRoom {
        public List<string>? LocalMembers { get; set; }
    }
    
}
