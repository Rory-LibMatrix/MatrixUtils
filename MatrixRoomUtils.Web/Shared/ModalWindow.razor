<div class="r-modal" style="top: @(_y)px; left: @(_x)px;">
    <div class="titlebar" @onmousedown="MouseDown" @onmouseup="MouseUp" @onmousemove="MouseMove" @onmouseleave="MouseMove">
        <b class="title">@Title</b>
        <button class="btnclose" @onclick="OnCloseClicked">X</button>
        <button class="btncollapse" @onclick="@(() => Collapsed = !Collapsed)">_</button>
    </div>
        <div class="content" style="@(Collapsed ? "height: 0px;" : "")">
            @ChildContent
        </div>
</div>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; } = "Untitled window";

    [Parameter]
    public double X { get; set; } = 60;

    [Parameter]
    public double Y { get; set; } = 60;

    [Parameter]
    public Action OnCloseClicked { get; set; }

    [Parameter]
    public bool Collapsed { get; set; } = false;

    private double _x = 60;
    private double _y = 60;

    protected override void OnInitialized() {
        _x = X;
        _y = Y;
    }

    private void WindowDrag(DragEventArgs obj) {
        Console.WriteLine("Drag: " + obj.ToJson());

        _x += obj.MovementX;
        _y += obj.MovementY;

        StateHasChanged();
    }

    private bool isDragging = false;
    private double dragX = 0;
    private double dragY = 0;

    private void MouseDown(MouseEventArgs obj) {
        isDragging = true;
        dragX = obj.ClientX;
        dragY = obj.ClientY;
    }

    private void MouseUp(MouseEventArgs obj) {
        isDragging = false;
    }

    private void MouseMove(MouseEventArgs obj) {
        if (isDragging) {
            _x += obj.ClientX - dragX;
            _y += obj.ClientY - dragY;
            dragX = obj.ClientX;
            dragY = obj.ClientY;
            StateHasChanged();
        }
    }

}
