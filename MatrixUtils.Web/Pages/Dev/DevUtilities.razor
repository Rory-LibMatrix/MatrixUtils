@page "/Dev/Utilities"
@using ArcaneLibs.Extensions
@using MatrixUtils.Abstractions

<h3>Debug Tools</h3>
<hr/>
<LinkButton href="/Dev/WellKnownRes">Well known res tests</LinkButton>
@if (Rooms.Count == 0) {
    <p>You are not in any rooms!</p>
    @* <p>Loading progress: @checkedRoomCount/@totalRoomCount</p> *@
}
else {
    <details>
        <summary>Room List</summary>
        @foreach (var roomId in Rooms) {
            <a style="color: unset; text-decoration: unset;" href="/RoomStateViewer/@roomId.Replace('.', '~')">
                <RoomListItem RoomInfo="@(new RoomInfo(hs.GetRoom(roomId)))" LoadData="true"></RoomListItem>
            </a>
        }
    </details>
}

<details open>
    <summary>Send GET request to URL</summary>
    <div class="input-group">
        <input type="text" class="form-control" @bind-value="GetRequestUrl" placeholder="URL">
        <button class="btn btn-outline-secondary" type="button" @onclick="SendGetRequest">Send</button>
    </div>
    <br/>
    <pre>@GetRequestResult</pre>
</details>

<div style="margin-bottom: 4em;"></div>
<LogView></LogView>

@code {
    public List<string> Rooms { get; set; } = new();
    public AuthenticatedHomeserverGeneric? hs { get; set; }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        hs = await RmuStorage.GetCurrentSessionOrNavigate();
        if (hs == null) return;
        Rooms = (await hs.GetJoinedRooms()).Select(x => x.RoomId).ToList();
        Console.WriteLine("Fetched joined rooms!");
    }

    //send req
    string GetRequestUrl { get; set; } = "";
    string GetRequestResult { get; set; } = "";

    private async Task SendGetRequest() {
        var httpClient = hs?.ClientHttpClient;
        try {
            var res = await httpClient.GetAsync(GetRequestUrl);
            if (res.IsSuccessStatusCode) {
                if (res.Content.Headers.ContentType.MediaType == "application/json")
                    GetRequestResult = (await res.Content.ReadFromJsonAsync<object>()).ToJson();
                else
                    GetRequestResult = await res.Content.ReadAsStringAsync();
                StateHasChanged();
                return;
            }
            if (res.Content.Headers.ContentType.MediaType == "application/json")
                GetRequestResult = $"Error: {res.StatusCode}\n" + (await res.Content.ReadFromJsonAsync<object>()).ToJson();
            else
                GetRequestResult = $"Error: {res.StatusCode}\n" + await res.Content.ReadAsStringAsync();
        }
        catch (Exception e) {
            GetRequestResult = $"Error: {e}";
        }
        StateHasChanged();
    }

}