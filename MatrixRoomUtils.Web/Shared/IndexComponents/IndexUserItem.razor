@using MatrixRoomUtils.Core.Extensions
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div style="margin-bottom: 1em;">
    <img style="border-radius: 50%; height: 3em; width: 3em;" src="@_avatarUrl"/>
    <p style="margin-left: 1em; margin-top: -0.5em; display: inline-block;">
        <input type="radio" name="csa" checked="@(RuntimeCache.LastUsedToken == User.AccessToken)" onclick="@SetCurrent" style="text-decoration-line: unset;"/>
        <b>@User.Profile.DisplayName</b> on <b>@User.LoginResponse.HomeServer</b>
        <a href="#" onclick="@RemoveUser">Remove</a>
    </p>
    <p style="margin-top: -1.5em; margin-left: 4em;">Member of @_roomCount rooms</p>

</div>

@code {

    [Parameter]
    public UserInfo User { get; set; } = null!;

    private string? _avatarUrl { get; set; }
    private int _roomCount { get; set; } = 0;

    protected override async Task OnInitializedAsync() {
        var hs = await new AuthenticatedHomeServer(User.LoginResponse.HomeServer, User.AccessToken, TODO).Configure();
        if (User.Profile.AvatarUrl != null && User.Profile.AvatarUrl != "")
            _avatarUrl = hs.ResolveMediaUri(User.Profile.AvatarUrl);
        else _avatarUrl = "https://api.dicebear.com/6.x/identicon/svg?seed=" + User.LoginResponse.UserId;
        try {
            _roomCount = (await hs.GetJoinedRooms()).Count;
        }
        catch {
            _roomCount = -1;
        }
        await base.OnInitializedAsync();
    }

    private async Task RemoveUser() {
        Console.WriteLine(User.ToJson());
        RuntimeCache.LoginSessions.Remove(User.AccessToken);

        StateHasChanged();
    }

    private async Task SetCurrent() {
        RuntimeCache.LastUsedToken = User.AccessToken;
    //RuntimeCache.CurrentHomeserver = await MatrixAuth.ResolveHomeserverFromWellKnown(LocalStorageWrapper.LoginSessions[Token].LoginResponse.HomeServer);
        await LocalStorageWrapper.SaveToLocalStorage(LocalStorage);
        await LocalStorageWrapper.InitialiseRuntimeVariables(LocalStorage);
        StateHasChanged();
    }

}